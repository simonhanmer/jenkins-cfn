AWSTemplateFormatVersion: 2010-09-09
Description: Deploy an ECS cluster running Jenkins with a persistent data store

Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: ECS Details
        Parameters:
          - pClusterName
          - pContainerName
          - pContainerCpu
          - pContainerMemory
          - pImageURL
          - pCertificateArn

      - Label:
          default: If you'd like to scale the cluster down in an evening, specify the scale in and out times below in hh:mm format
        Parameters:
          - pScaleOutTime
          - pScaleInTime

      - Label:
          default: Network configuration
        Parameters:
          - pVpcId
          - pPublicSubnet1
          - pPublicSubnet2
          - pPrivateSubnet1
          - pPrivateSubnet2
          - pSubnetDeployments
      - Label:
          default: Specify domain name (e.g. example.com) and domain name (e.g. jenkins.example.com) if you want to update Route53
        Parameters:
          - pDomainName
          - pDomainRecord

Parameters:
  # pEnvironmentName:
  #   Type:           String
  #   Default:        JenkinsECSDeployment
  #   Description:    Name for project deployment
  pVpcId:
    Type:           AWS::EC2::VPC::Id
    Description:    VPC for deployment
  pCertificateArn:
    Type:           String
    AllowedPattern: '^.+$'
    Description:    ARN of an existing certificate which will be attached to the ALB created by the stack, to serve HTTPS traffic (mandatory).
  pClusterName:
    Type:           String
    Description:    Name for ECS Jenkins Cluster
    Default:        JenkinsCluster
  pContainerCpu:
    Type:           Number
    Description:    Number of CPU units for ECS Task Definition - 1 vCPU = 256 CpuUnits
    AllowedValues:  [ 256, 512, 1024, 2048, 4096 ]
    Default:        512
  pContainerName:
    Type:           String
    Description:    Name for Container within ECS Task Definition
    Default:        JenkinsContainer
  pContainerMemory:
    Type:           Number
    Description:    Amount of memory used by task (in MiB)
    AllowedValues:  [ 512, 1024, 2048, 3072, 4096, 5120 ]
    Default:        1024
  pDomainName:
    Type:           String
    Description:    Route53 Hosted Zone Domain to add CNAME to (e.g. example.com), or blank string for no DNS updates
    Default:        ""
    AllowedPattern: ^$|^[a-zA-Z0-9][a-zA-Z0-9-]*\.[a-zA-Z]+\.$
  pDomainRecord:
    Type:           String
    Description:    Name for CNAME record pointing to ALB, or blank string for no DNS updates
    Default:        ""  
  pImageURL:
    Type:           String
    Description:    URL for Jenkins Image
    Default:        docker.io/jenkins/jenkins
  pPublicSubnet1:
    Type:           AWS::EC2::Subnet::Id
    Description:    Public subnet in availability zone 1
  pPublicSubnet2:
    Type:           AWS::EC2::Subnet::Id
    Description:    Public subnet in availability zone 2
  pPrivateSubnet1:
    Type:           AWS::EC2::Subnet::Id
    Description:    Private subnet in availability zone 1
  pPrivateSubnet2:
    Type:           AWS::EC2::Subnet::Id
    Description:    Private subnet in availability zone 2  
  pScaleInTime:
    Type:           String
    Description:    Time to scale in (optional but should be in 24 hour hh:mm format if specified)
    Default:        ""
    AllowedPattern: ^$|^[0-2]\d:[0-5]\d$
  pScaleOutTime:
    Type:           String
    Description:    Time to scale out (optional but should be in 24 hour hh:mm format if specified)
    Default:        ""
    AllowedPattern: ^$|^[0-2]\d:[0-5]\d$
  pSubnetDeployments:
    Type:           String
    AllowedValues:  [ 'Public', 'Private' ]
    Default:        'Public'
    Description:    Deploy ECS tasks to public or private subnets? Private will require NAT Gateways attached to subnets.



Conditions:
  cScheduleSpecified: !And
    - !Not 
      - !Equals [ !Ref pScaleOutTime, ""]
    - !Not 
      - !Equals [ !Ref pScaleInTime, ""]

  cRoute53Update: !And
    - !Not 
      - !Equals [ !Ref pDomainName, ""]
    - !Not 
      - !Equals [ !Ref pDomainRecord, ""]

  cUsePublicSubnets: !Equals [ !Ref pSubnetDeployments, "Public"]

Resources:
# Security Groups -------------------------------------------------------------
  rJenkinsLBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Jenkins LoadBalancer
      VpcId:            !Ref pVpcId
      SecurityGroupIngress:
        - IpProtocol:   tcp
          Description:  Allow incoming access on port 8080
          FromPort:     443
          ToPort:       443
          CidrIp:       0.0.0.0/0

  rJenkinsSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Jenkins instances
      VpcId:            !Ref pVpcId
      SecurityGroupIngress:
        - IpProtocol:             tcp
          Description:            Allow incoming access on port 8080 from JenkinsLB
          FromPort:               8080
          ToPort:                 8080
          SourceSecurityGroupId:  !Ref rJenkinsLBSG

  rJenkinsEFSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Jenkins EFS Data volume
      VpcId:            !Ref pVpcId
      SecurityGroupIngress:
        - IpProtocol:             tcp
          Description:            EFS Access
          FromPort:               2049
          ToPort:                 2049
          SourceSecurityGroupId:  !Ref rJenkinsSG


# EFS Resources ---------------------------------------------------------------
  rJenkinsDataVol:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: JenkinsDataVol

  rJenkinsDataVolAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref rJenkinsDataVol
      PosixUser:
        Uid: '1000'
        Gid: '1000'
      RootDirectory:
        CreationInfo:
          OwnerGid: '1000'
          OwnerUid: '1000'
          Permissions: '755'
        Path: '/jenkins-home'

  rJenkinsDataVolMountTargetSnA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref rJenkinsDataVol
      SecurityGroups:
        - !Ref rJenkinsEFSSG
      SubnetId: !Ref pPrivateSubnet1

  rJenkinsDataVolMountTargetSnB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref rJenkinsDataVol
      SecurityGroups:
        - !Ref rJenkinsEFSSG
      SubnetId: !Ref pPrivateSubnet2

# Log Group -------------------------------------------------------------------
  rJenkinsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${pClusterName}"
      RetentionInDays: 3

# IAM Roles -------------------------------------------------------------------
  rJenkinsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
                - ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  rJenkinsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      Policies:
        - PolicyName: TaskRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                Resource: !GetAtt rJenkinsDataVol.Arn

  rJenkinsAutoscalingRole:
    Type: AWS::IAM::Role
    Condition: cScheduleSpecified
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
      Policies:
        - PolicyName: ECS_Autoscaling
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: '*'

# ECS Resources ---------------------------------------------------------------
  rJenkinsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref pClusterName
      CapacityProviders:
        - FARGATE_SPOT

  rJenkinsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Volumes:
        - Name:                 jenkins-home
          EFSVolumeConfiguration:
            FilesystemId:       !Ref rJenkinsDataVol
            TransitEncryption:  ENABLED
            AuthorizationConfig:
              AccessPointId:    !Ref rJenkinsDataVolAccessPoint
              IAM:              ENABLED
      ContainerDefinitions:
        - Name:                 !Ref pContainerName
#          Image:                !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${pImageURL}"
          Image:                !Ref pImageURL
          MountPoints:
            - SourceVolume:     jenkins-home
              ContainerPath:    /var/jenkins_home
              ReadOnly:         false
          PortMappings:
            - ContainerPort:    8080
          LogConfiguration:
            LogDriver:          awslogs
            Options:
              awslogs-region:   !Ref 'AWS::Region'
              awslogs-group:    !Ref rJenkinsLogGroup
              awslogs-stream-prefix: stdout
      RequiresCompatibilities:
        - FARGATE
      Cpu:    !Ref pContainerCpu
      Memory: !Ref pContainerMemory
      NetworkMode: awsvpc
      TaskRoleArn:      !Ref rJenkinsTaskRole
      ExecutionRoleArn: !Ref rJenkinsExecutionRole

  rJenkinsService:
    Type: AWS::ECS::Service
    DependsOn: rLoadBalancerListener
    Properties:
      Cluster: !Ref rJenkinsCluster
      TaskDefinition: !Ref rJenkinsTaskDefinition
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 300
      LaunchType: FARGATE
      DeploymentConfiguration:
        MinimumHealthyPercent: 0
        MaximumPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !If 
              - cUsePublicSubnets
              - !Ref pPublicSubnet1
              - !Ref pPrivateSubnet1
            - !If 
              - cUsePublicSubnets
              - !Ref pPublicSubnet2
              - !Ref pPrivateSubnet2
          SecurityGroups:
            - !GetAtt rJenkinsSG.GroupId
      LoadBalancers:
        - ContainerName: !Ref pContainerName
          ContainerPort: 8080
          TargetGroupArn: !Ref rJenkinsTargetGroup


# LoadBalancer Resources ------------------------------------------------------
  rLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref pPublicSubnet1
        - !Ref pPublicSubnet2
      SecurityGroups:
        - !Ref rJenkinsLBSG

  rLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref pCertificateArn
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref rJenkinsTargetGroup
      LoadBalancerArn: !Ref rLoadBalancer

  rJenkinsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /login
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref pVpcId


# Autoscaling Schedule --------------------------------------------------------
  rServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Condition: cScheduleSpecified
    Properties:
      MinCapacity: 0
      MaxCapacity: 1
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      ResourceId: !Join [
        "/", [
          "service",
          !Ref rJenkinsCluster,
          !GetAtt rJenkinsService.Name
        ]
      ]
      RoleARN: !GetAtt rJenkinsAutoscalingRole.Arn
      ScheduledActions:
        - Schedule: !Sub
          - "cron(${mm} ${hh} * * ? *)"
          - mm: !Select [ 1, !Split [ ":", !Ref pScaleOutTime ]]
            hh: !Select [ 0, !Split [ ":", !Ref pScaleOutTime ]]
          ScheduledActionName: increaseSchedule
          ScalableTargetAction: 
            MinCapacity: 1
            MaxCapacity: 1
        - Schedule: !Sub
          - "cron(${mm} ${hh} * * ? *)"
          - mm: !Select [ 1, !Split [ ":", !Ref pScaleInTime ]]
            hh: !Select [ 0, !Split [ ":", !Ref pScaleInTime ]]
          ScheduledActionName: decreaseSchedule
          ScalableTargetAction: 
            MinCapacity: 0
            MaxCapacity: 0       


# Route53 Update --------------------------------------------------------------
  rR53LBName:
    Type: AWS::Route53::RecordSet
    Condition: cRoute53Update
    Properties:
      HostedZoneName: !Ref pDomainName
      Type:           CNAME
      Name:           !Ref pDomainRecord
      TTL:            300
      ResourceRecords:
        - !GetAtt rLoadBalancer.DNSName


Outputs:
  oImageUrl:
    Description: URL For Docker image
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${pImageURL}"