AWSTemplateFormatVersion: 2010-09-09
Description: |
  Deploy a VPC across two Availability Zones, with 1 public subnet and 1 private subnet in each AZ.
  There are 2 deployments options:
  1. Standard configuration
  2. NAT Gateway in each AZ, and routing from private subnets to the Gateways


Metadata: 
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Configuration
        Parameters:
          - pEnvironmentName
          - pVpcCidr
          - pCreateGateways

      - Label:
          default: Availability Zone 1 Configuration
        Parameters:
          - pAvailabilityZone1
          - pPublicSubnet1Cidr
          - pPrivateSubnet1Cidr

      - Label:
          default: Availability Zone 2 Configuration
        Parameters:
          - pAvailabilityZone2
          - pPublicSubnet2Cidr
          - pPrivateSubnet2Cidr


Parameters:
  pEnvironmentName:
    Type:           String
    Default:        JenkinsECSDeployment
    Description:    Name for project deployment
  pVpcCidr:
    Type:           String
    Default:        10.10.0.0/16
    Description:    VPC CIDR Block (e.g. 10.10.0.0/16)
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  pAvailabilityZone1:
    Description:    First Availability Zone
    Type:           AWS::EC2::AvailabilityZone::Name
  pAvailabilityZone2:
    Description:    Second Availability Zone
    Type:           AWS::EC2::AvailabilityZone::Name
  pPublicSubnet1Cidr:
    Type:           String
    Default:        10.10.0.0/24
    Description:    VPC CIDR Block for public subnet in AZ 1 (e.g. 10.10.1.0/24)
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  pPublicSubnet2Cidr:
    Type:           String
    Default:        10.10.1.0/24
    Description:    VPC CIDR Block for public subnet in AZ 2 (e.g. 10.10.1.0/24)
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  pPrivateSubnet1Cidr:
    Type:           String
    Default:        10.10.2.0/24
    Description:    VPC CIDR Block for private subnet in AZ 1 (e.g. 10.10.1.0/24)
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  pPrivateSubnet2Cidr:
    Type:           String
    Default:        10.10.3.0/24
    Description:    VPC CIDR Block  for private subnet in AZ 2 (e.g. 10.10.1.0/24)
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
  pCreateGateways:
    Type:           String
    AllowedValues:  [ 'Yes', 'No' ]
    Default:        'No'
    Description:    Shall we create NAT Gateways?

Conditions:
  cCreateGateways: !Equals [ !Ref pCreateGateways, 'Yes']


Resources:
# VPC Resources ---------------------------------------------------------------
  rVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:          !Ref pVpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport:   true
      Tags:
        - Key:    Name
          Value:  !Sub "vpc-${pEnvironmentName}"


#   Subnets ------------------------------------------
  rPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:                !Ref rVPC
      AvailabilityZone:     !Ref pAvailabilityZone1
      CidrBlock:            !Ref pPublicSubnet1Cidr
      MapPublicIpOnLaunch:  true
      Tags:
        - Key:    Name
          Value:  !Sub "publicSubnet1-${pEnvironmentName}"

  rPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:                !Ref rVPC
      AvailabilityZone:     !Ref pAvailabilityZone2
      CidrBlock:            !Ref pPublicSubnet2Cidr
      MapPublicIpOnLaunch:  true
      Tags:
        - Key:    Name
          Value:  !Sub "publicSubnet2-${pEnvironmentName}"

  rPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:                !Ref rVPC
      AvailabilityZone:     !Ref pAvailabilityZone1
      CidrBlock:            !Ref pPrivateSubnet1Cidr
      MapPublicIpOnLaunch:  false
      Tags:
        - Key:    Name
          Value:  !Sub "privateSubnet1-${pEnvironmentName}"

  rPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:                !Ref rVPC
      AvailabilityZone:     !Ref pAvailabilityZone2
      CidrBlock:            !Ref pPrivateSubnet2Cidr
      MapPublicIpOnLaunch:  false
      Tags:
        - Key:    Name
          Value:  !Sub "privateSubnet2-${pEnvironmentName}"


# Internet Gateway and routing for public subnets ----
  rInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key:    Name
          Value:  !Sub "IGW-${pEnvironmentName}"

  rGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:              !Ref rVPC
      InternetGatewayId:  !Ref rInternetGateway

  rPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC
      Tags:
        - Key:    Name
          Value:  !Sub "public-rtb-${pEnvironmentName}"

  rPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      GatewayId:            !Ref rInternetGateway
      RouteTableId:         !Ref rPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  rPublicSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:     !Ref rPublicSubnet1
      RouteTableId: !Ref rPublicRouteTable

  rPublicSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:     !Ref rPublicSubnet2
      RouteTableId: !Ref rPublicRouteTable


# NAT Gateway Configuration --------------------------
  rNatEip1:
    Type: AWS::EC2::EIP
    Condition: cCreateGateways
    Properties:
      Domain: vpc
      Tags:
        - Key:    Name
          Value:  !Sub "EIP1-${pEnvironmentName}"

  rNatEip2:
    Type: AWS::EC2::EIP
    Condition: cCreateGateways
    Properties:
      Domain: vpc
      Tags:
        - Key:    Name
          Value:  !Sub "EIP2-${pEnvironmentName}"

  rNatGateway1:
    Type: AWS::EC2::NatGateway
    Condition: cCreateGateways
    Properties:
      AllocationId: !GetAtt rNatEip1.AllocationId
      SubnetId:     !Ref rPublicSubnet1
      Tags:
        - Key:    Name
          Value:  !Sub "NGW1-${pEnvironmentName}"

  rNatGateway2:
    Type: AWS::EC2::NatGateway
    Condition: cCreateGateways
    Properties:
      AllocationId: !GetAtt rNatEip2.AllocationId
      SubnetId:     !Ref rPublicSubnet2
      Tags:
        - Key:    Name
          Value:  !Sub "NGW2-${pEnvironmentName}"

  rPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Condition: cCreateGateways
    Properties:
      VpcId:  !Ref rVPC
      Tags:
        - Key:    Name
          Value:  !Sub "private-rtb1-${pEnvironmentName}"

  rPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Condition: cCreateGateways
    Properties:
      VpcId:  !Ref rVPC
      Tags:
        - Key:    Name
          Value:  !Sub "private-rtb2-${pEnvironmentName}"

  rPrivateRoute1:
    Type: AWS::EC2::Route
    Condition: cCreateGateways
    Properties:
      NatGatewayId:         !Ref rNatGateway1
      RouteTableId:         !Ref rPrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0

  rPrivateRoute2:
    Type: AWS::EC2::Route
    Condition: cCreateGateways
    Properties:
      NatGatewayId:         !Ref rNatGateway2
      RouteTableId:         !Ref rPrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0

  rPrivateSubnet1RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: cCreateGateways
    Properties:
      SubnetId:     !Ref rPrivateSubnet1
      RouteTableId: !Ref rPrivateRouteTable1

  rPrivateSubnet2RouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: cCreateGateways
    Properties:
      SubnetId:     !Ref rPrivateSubnet2
      RouteTableId: !Ref rPrivateRouteTable2

Outputs:
  oVpcId:
    Description:  Id of created VPC
    Value:        !Ref rVPC
  oPublicSubnet1Id:
    Description:  Id of Public Subnet in Availability Zone 1
    Value:        !Ref rPublicSubnet1
  oPublicSubnet2Id:
    Description: Id of Public Subnet in Availability Zone 2
    Value:        !Ref rPublicSubnet2
  oPrivateSubnet1Id:
    Description: Id of Private Subnet in Availability Zone 1
    Value:        !Ref rPrivateSubnet1
  oPrivateSubnet2Id:
    Description: Id of Private Subnet in Availability Zone 2
    Value:        !Ref rPrivateSubnet2